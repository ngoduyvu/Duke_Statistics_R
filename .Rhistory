length(unique(movies_filtered$audience_score))
length(unique(movies_filtered$genre))
summarize_each(movies_filtered, fun(length(unique())))
test <- lapply(movies_filtered, length(unique))
test <- lapply(movies_filtered, unique)
test
test <- lapply(movies_filtered, unique)
sapply(test, length)
unique1 <- lapply(movies_filtered, unique)
unique2 <- sapply(test, length)
class(unique2)
unique2
unique2 <- as.data.frame(unique2)
unique2
plot(unique2)
str(unique2)
cbind(Variables=rownames(unique2), unique2)
plot(unique2)
ggplot(unquie2, aes(x=Variables, y=unique2)) + geom_bar()
ggplot(unique2, aes(x=Variables, y=unique2)) + geom_bar()
names(unique2)
View(unique2)
unique3<-cbind(Variables=rownames(unique2), unique2)
View(unique3)
ggplot(unique3, aes(x=Variables, y=unique2)) + geom_bar()
ggplot(unique3, aes(x=Variables, y=unique2)) + geom_bar(stat = "identity")
table(unique3)
names(unique3)
table(unique2)
glimpse(unique3)
library(ggplot2)
library(dplyr)
library(statsr)
load("~/GitHub/Duke_Statistics_R/Linear Regression/Project/movies.Rdata")
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -top200_box, -(actor1:rt_url)))
movies_filtered <- filter(movies_filtered, title_type == "Feature Film")
movies_filtered <- na.omit(movies_filtered)
unique1 <- lapply(movies_filtered, unique)
unique2 <- sapply(test, length)
unique2 <- as.data.frame(unique2)
unique3<-cbind(Variables=rownames(unique2), unique2)
ggplot(unique3, aes(x=Variables, y=unique2)) + geom_bar(stat = "identity")
unique2 <- sapply(unique1, length)
unique2 <- as.data.frame(unique2)
unique3<-cbind(Variables=rownames(unique2), unique2)
ggplot(unique3, aes(x=Variables, y=unique2)) + geom_bar(stat = "identity")
View(unique3)
table(unique3)
summary(unique3)
unique3
rownames(unique3)<- NULL
unique3
kable(unique3)
library(knitr)
kable(unique3)
View(movies_filtered)
ddplyr(movies_filtered, c(title_type, genre, runtime), summarize, count = lenght(unique(value)))
library(plyr)
ddplyr(movies_filtered, c(title_type, genre, runtime), summarize, count = lenght(unique(value)))
library(plyr)
library(reshape)
ddplyr(movies_filtered, c(title_type, genre, runtime), summarize, count = lenght(unique(value)))
library(dplyr)
ddplyr(movies_filtered, c(title_type, genre, runtime), summarize, count = lenght(unique(value)))
ddply(movies_filtered, c(title_type, genre, runtime), summarize, count = lenght(unique(value)))
ddply(movies_filtered, c("title_type", "genre", "runtime"), summarize, count = lenght(unique(value)))
ddply(movies_filtered, c("title_type", "genre", "runtime"), summarize, count = length(unique(value)))
ddply(movies_filtered, c("title_type", "genre", "runtime"), summarize, count = length(unique()))
ddply(movies_filtered, c("title_type", "genre", "runtime"), summarize, count = length(unique(value)))
ddply(movies_filtered, c("title_type", "genre", "runtime"), summarize, count = length(unique(title_type)))
library(plyr)
count(movies_filtered, vars="title_type")
var_count <- names(movies_filtered)
count(movies_filtered, vars=var_count)
library(ggplot2)
library(dplyr)
library(statsr)
library(knitr)
### Load data
load("movies.Rdata")
load("~/GitHub/Duke_Statistics_R/Linear Regression/Project/movies.Rdata")
movies_filtered <- filter(movies_filtered, title_type == "Feature Film")
movies_filtered <- na.omit(movies_filtered)
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -top200_box, -(actor1:rt_url)))
movies_filtered <- filter(movies_filtered, title_type == "Feature Film")
movies_filtered <- na.omit(movies_filtered)
unique1 <- lapply(movies_filtered, unique)
unique2 <- sapply(unique1, length)
unique2 <- as.data.frame(unique2)
unique3<-cbind(Variables=rownames(unique2), unique2)
rownames(unique3) <- NULL
View(unique3)
View(movies_filtered)
View(unique2)
unique1 <- lapply(movies_filtered, unique)
unique2 <- sapply(unique1, length)
unique2 <- as.data.frame(unique2)
colnames(unique2) <- "Count_Distinct"
unique3<-cbind(Variables=rownames(unique2), unique2)
rownames(unique3) <- NULL
unique4 <- unique3 %>% mutate(Percent_Unique = Count_Distinct/)
length(movies_filtered)
numrows(movies_filtered)
unique4 <- unique3 %>% mutate(Percent_Unique = Count_Distinct/n(movies_filtered))
dim(movies_filtered)
unique4 <- unique3 %>% mutate(Percent_Unique = Count_Distinct/nrow(movies_filtered))
View(unique4)
unique4 <- unique3 %>% mutate(Percent_Unique = 1-Count_Distinct/nrow(movies_filtered))
unique4 <- unique3 %>% mutate(Percent_Unique = 1-Count_Distinct/nrow(movies_filtered))
librarby(scales)
library(scales)
unique4 <- unique3 %>% mutate(percent(Percent_Unique = 1-Count_Distinct/nrow(movies_filtered))
)
percent(unique4$Percent_Unique)
unique4$Percent_Unique <- percent(unique4$Percent_Unique)
View(unique4)
unique1 <- lapply(movies_filtered, unique)
unique2 <- sapply(unique1, length)
unique2 <- as.data.frame(unique2)
colnames(unique2) <- "Count_Distinct"
unique3<-cbind(Variables=rownames(unique2), unique2)
rownames(unique3) <- NULL
unique4 <- unique3 %>% mutate(Percent_Unique = 1-Count_Distinct/nrow(movies_filtered))
unique4$Percent_Unique <- percent(unique4$Percent_Unique)
kable(unique3)
kable(unique4)
ggplot(unique4, aes(x=Variables, y=Percent_Unique)) + geom_bar(stat = "identity")
library(ggplot2)
library(dplyr)
library(statsr)
library(knitr)
### Load data
load("movies.Rdata")
load("~/GitHub/Duke_Statistics_R/Linear Regression/Project/movies.Rdata")
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -top200_box, -(actor1:rt_url)))
movies_filtered <- filter(movies_filtered, title_type == "Feature Film")
movies_filtered <- na.omit(movies_filtered)
unique1 <- lapply(movies_filtered, unique)
unique2 <- sapply(unique1, length)
unique2 <- as.data.frame(unique2)
colnames(unique2) <- "Count_Distinct"
unique3<-cbind(Variables=rownames(unique2), unique2)
rownames(unique3) <- NULL
unique4 <- unique3 %>% mutate(Percent_Unique = 1-Count_Distinct/nrow(movies_filtered))
unique4$Percent_Unique <- percent(unique4$Percent_Unique)
kable(unique4)
unique4$Percent_Unique <- percent(unique4$Percent_Unique)
library(scales)
unique4$Percent_Unique <- percent(unique4$Percent_Unique)
kable(unique4)
kable(unique4, results="asis"")
kable(unique4, results="asis")
kable(unique4, format="html")
library(formattable)
View(unique4)
format_table(unique4,list(Variables=formatter("span"="colr:red")))
format_table(unique4,list(Variables=formatter("span", style="color:red")))
format_table(unique4,list(Variables=formatter("span", style="color:blue")), align = c)
format_table(unique4,list(Variables=formatter("span", style="color:blue")), align = "c")
kable(unique4)
load("~/GitHub/Duke_Statistics_R/Linear Regression/Project/movies.Rdata")
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -top200_box, -imdb_rating, -imdb_num_votes, -(actor1:rt_url)))
movies_filtered <- filter(movies_filtered, title_type == "Feature Film")
movieRating <- c("G", "PG", "PG-13")
movies_filtered <- filter(movies_filtered, mpaa_rating %in% movieRating)
movies_filtered <- na.omit(movies_filtered)
ibrary(ggplot2)
library(dplyr)
library(statsr)
library(knitr)
library(scales)
library(formattabl
library(formattable)
library(formattable)
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -top200_box, -imdb_rating, -imdb_num_votes, -(actor1:rt_url)))
movies_filtered <- filter(movies_filtered, title_type == "Feature Film")
movieRating <- c("G", "PG", "PG-13")
movies_filtered <- filter(movies_filtered, mpaa_rating %in% movieRating)
movies_filtered <- na.omit(movies_filtered)
movies_filtered <- select(movies_filtered, c(-(title:title_type), -critics_rating, -audience_rating,-studio, -director))
dim(movies_filtered)
str(movies_filtered)
unique1 <- lapply(movies_filtered, unique)
unique2 <- as.data.frame(unique2)
colnames(unique2) <- "Count_Distinct"
unique3<-cbind(Variables=rownames(unique2), unique2)
rownames(unique3) <- NULL
unique4 <- unique3 %>% mutate(Percent_Unique = 1-Count_Distinct/nrow(movies_filtered))
unique4$Percent_Unique <- percent(unique4$Percent_Unique)
format_table(unique4,list(Variables=formatter("span", style="color:blue")), align = "c")
unique4 <- unique3 %>% mutate(Percent_Unique = 1-Count_Distinct/nrow(movies_filtered))
unique3<-cbind(Variables=rownames(unique2), unique2)
unique1 <- lapply(movies_filtered, unique)
unique2 <- sapply(unique1, length)
unique2 <- as.data.frame(unique2)
colnames(unique2) <- "Count_Distinct"
unique3<-cbind(Variables=rownames(unique2), unique2)
rownames(unique3) <- NULL
unique4 <- unique3 %>% mutate(Percent_Unique = 1-Count_Distinct/nrow(movies_filtered))
unique4$Percent_Unique <- percent(unique4$Percent_Unique)
format_table(unique4,list(Variables=formatter("span", style="color:blue")), align = "c")
kable(unique4)
ggplot(unique4, aes(x=Variables, y=Percent_Unique)) + geom_bar(stat = "identity")
load("~/GitHub/Duke_Statistics_R/Linear Regression/Project/movies.Rdata")
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -top200_box, -imdb_rating, -imdb_num_votes, -(actor1:rt_url)))
library(ggplot2)
library(dplyr)
library(statsr)
library(knitr)
library(scales)
library(formattable)
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -top200_box, -imdb_rating, -imdb_num_votes, -(actor1:rt_url)))
movies_filtered <- filter(movies_filtered, title_type == "Feature Film")
movieRating <- c("G", "PG", "PG-13")
movies_filtered <- filter(movies_filtered, mpaa_rating %in% movieRating)
movies_filtered <- na.omit(movies_filtered)
movies_filtered <- select(movies_filtered, c(-(title:title_type), -critics_rating, -audience_rating,-studio, -director))
View(movies_filtered)
tmpMLR <- lm(audience_score ~., data=movies_filtered)
summary(tmpMLR)
VARIABLE=c("",gsub("[-^0-9]", "", names(unlist(tmpMLR$xlevels))))
MODALITY=c("",as.character(unlist(tmpMLR$xlevels)))
names=data.frame(VARIABLE,MODALITY,NOMVAR=c(
+ "(Intercept)",paste(VARIABLE,MODALITY,sep="")[-1]))
names=data.frame(VARIABLE,MODALITY,NOMVAR=c("(Intercept)",paste(VARIABLE,MODALITY,sep="")[-1]))
regression=data.frame(NOMVAR=names(coefficients(tmpMLR)), COEF=as.numeric(coefficients(tmpMLR)))
merge(names,regression,all.x=TRUE)
merge(names,regression)
library(xtable)
htlmtable <- xtable(merge(names,regression))
print(htlmtable,type="html")
outlierTest(tmpMLR)
library(car)
outlierTest(tmpMLR)
qqPlot(tmpMLR)
library(MASS)
sresid <- studres(tmp_MLR)
sresid <- studres(tmpMLR)
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
xfit<-seq(min(sresid),max(sresid),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit)
ncvTest(tmpMLR)
spreadLevelPlot(tmpMLR)
vif(tmpMLR) # variance inflation factors
sqrt(vif(tmpMLR)) > 2 # problem?
crPlots(tmpMLR)
ceresPlots(tmpMLR)
load("~/GitHub/Duke_Statistics_R/Linear Regression/Project/movies.Rdata")
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -top200_box, -imdb_rating, -imdb_num_votes, -(actor1:rt_url)))
library(ggplot2)
library(dplyr)
library(statsr)
library(knitr)
library(scales)
library(formattable)
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -top200_box, -imdb_rating, -imdb_num_votes, -(actor1:rt_url)))
movies_filtered <- filter(movies_filtered, title_type == "Feature Film")
movieRating <- c("G", "PG", "PG-13")
movies_filtered <- filter(movies_filtered, mpaa_rating %in% movieRating)
movies_filtered <- na.omit(movies_filtered)
movies_filtered <- select(movies_filtered, c(-(title:title_type), -critics_rating, -audience_rating,-studio, -director))
dim(movies_filtered)
str(movies_filtered)
summary(movies_filtered)
table(movies_filtered$best_actor_win)
table(movies_filtered$best_actor_win, movies_filtered$best_actress_win)
View(movies_filtered)
movies_filtered2 <- select(movies_filtered, genre:audience_score)
tmpMLR2 <- lm(audience_score ~., data=movies_filtered2)
summary(tmpMLR2)
tmpMLR <- lm(audience_score ~., data=movies_filtered)
tmpMLR <- lm(audience_score ~., data=movies_filtered2)
summary(tmpMLR)
summary(movies_filtered$audience_score)
ggplot(movies_filtered, aes(x = audience_score)) + geom_histogram() + xlab("Audience Score") + ylab("Count") + ggtitle("Histogram of Audience Score")
summary(movies_filtered$audience_score)
sresid <- studres(tmpMLR)
library(car)
library(MASS)
qqPlot(tmpMLR)
ggplot(movies_filtered, aes(x = title_type, y = audience_score)) + geom_boxplot() + xlab("Title Type") + ylab("Audience Score") + ggtitle("Audience Score vs. Title Type")
movies_filtered %>% group_by(title_type) %>% summarise(median_score = median(audience_score), iqr_score = IQR(audience_score))
unique1 <- lapply(movies_filtered, unique)
unique2 <- sapply(unique1, length)
unique2 <- as.data.frame(unique2)
colnames(unique2) <- "Count_Distinct"
unique3<-cbind(Variables=rownames(unique2), unique2)
rownames(unique3) <- NULL
unique4 <- unique3 %>% mutate(Percent_Unique = 1-Count_Distinct/nrow(movies_filtered))
unique4$Percent_Unique <- percent(unique4$Percent_Unique)
format_table(unique4,list(Variables=formatter("span", style="color:blue")), align = "c")
movieMLR <- lm(audience_score ~., data=movies_filtered)
cor(movies$runtime, movies$critics_score)
str(movies_filtered)
plot(movies_filtered$runtime, movies_filtered$critics_score)
plot(movies_filtered$critics_score, movies_filtered$runtime)
cor(movies_filtered$critics_score, movies_filtered$runtime)
movieMLR <- lm(audience_score ~., data=movies_filtered)
summary(movieMLR)
pairs(movies_filtered)
library(psych)
pairs.panels(movies_filtered)
load("~/GitHub/Duke_Statistics_R/Linear Regression/Project/movies.Rdata")
View(movies)
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=Yes)
)
library(dplyr)
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=Yes)
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=Yes))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom==Yes))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=="Yes"))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=="Yes", "Yes"))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=="Yes", "Yes", "No"))
View(movies_new)
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=="Yes", 1, 0))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom="Yes", 1, 0))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=Yes, 1, 0))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom==Yes, 1, 0))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom="Yes", 1, 0))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=="Yes", 1, 0))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=="Yes", "1"Yes", "No"))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=="Yes", "Yes", "No"))
str(movies)
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=1, "Yes", "No"))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom==1, "Yes", "No"))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom==1, 1, 0))
View(movies_new)
movies_new$newVar <- ifelse(best_pic_nom=1,1,0)
movies_new$newVar <- ifelse(movies_new$best_pic_nom=1,1,0)
movies_new$newVar <- ifelse(movies_new$best_pic_nom==1,1,0)
movies_new$newVar <- ifelse(movies_new$best_pic_nom=1,1,0)
movies_new$newVar <- ifelse(movies_new$best_pic_nom=="Yes",1,0)
movies_new$newVar <- ifelse(movies_new$best_pic_nom=="yes",1,0)
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=="yes", 1, 0))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=="yes", 1,
ifelse(best_pic_win=="yes", 1,
ifelse(best_actor_win=="yes", 1,
ifelse(best_actress_win=="yes", 1,
ifelse(best_dir_win=="yes", 1,
ifelse(top200_box=="yes", 1, 0))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=="yes", 1,
ifelse(best_pic_win=="yes", 1,
ifelse(best_actor_win=="yes", 1,
ifelse(best_actress_win=="yes", 1,
ifelse(best_dir_win=="yes", 1,
ifelse(top200_box=="yes", 1, 0)))))))
movies_new <- mutate(movies, best_any=ifelse(best_pic_nom=="yes", 1,
ifelse(best_pic_win=="yes", 1,
ifelse(best_actor_win=="yes", 1,
ifelse(best_actress_win=="yes", 1,
ifelse(best_dir_win=="yes", 1,
ifelse(top200_box=="yes", 1, 0)))))))
library(ggplot2)
library(dplyr)
library(statsr)
library(knitr)
library(scales)
library(formattable)
load("~/GitHub/Duke_Statistics_R/Inferential/project/gss.Rdata")
load("~/GitHub/Duke_Statistics_R/Linear Regression/Project/movies.Rdata")
movies <- filter(movies, thtr_rel_year >1999)
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -imdb_rating, -imdb_num_votes, -(actor1:rt_url)))
removeGenres <- c("Art House & International", "Musical & Performing Arts", "Science Fiction & Fantasy")
movies_filtered <- filter(movies_filtered, genre != removeGenres)
movies_filtered <- filter(movies_filtered, title_type == "Feature Film")
movieRating <- c("G", "PG", "PG-13")
movies_filtered <- filter(movies_filtered, mpaa_rating %in% movieRating)
movies_filtered <- na.omit(movies_filtered)
movies_filtered <- select(movies_filtered, c(-(title:title_type), -critics_rating, -audience_rating,-studio, -director))
movies_filtered <- mutate(movies_filtered, best_any=ifelse(best_pic_nom=="yes", 1,
ifelse(best_pic_win=="yes", 1,
ifelse(best_actor_win=="yes", 1,
ifelse(best_actress_win=="yes", 1,
ifelse(best_dir_win=="yes", 1,
ifelse(top200_box=="yes", 1, 0)))))))
movies_filtered$best_any <- factor(movies_filtered$best_any, labels = c("No", "Yes"))
movies_filtered <- select(movies_filtered, genre, runtime, mpaa_rating, critics_score, audience_score, best_any)
summary(movies_filtered$audience_score)
ggplot(movies_filtered, aes(x = audience_score)) + geom_histogram() + xlab("Audience Score") + ylab("Count") + ggtitle("Histogram of Audience Score")
```
library(psych)
pairs.panels(movies_filtered)
movieMLR <- lm(audience_score ~., data=movies_filtered)
summary(movieMLR)
movieMLR2 <- lm(audience_score ~. -mpaa_rating, data=movies_filtered)
summary(movieMLR2)
View(movies_filtered)
View(movies)
MLR <- lm(audience_score ~., data=movies_filtered)
summary(MLR)
huntsman_score <- predict(MLR, newdata = huntsman, interval = "prediction")
huntsman <- data.frame(genre = "Action & Adventure", runtime = 121, mpaa_rating = "PG-13",  critics_score = 17, best_any = "Yes")
huntsman_score <- predict(MLR, newdata = huntsman, interval = "prediction")
huntsman_score[1]
huntsman_score
qqPlot(tmpMLR)
ceresPlots(tmpMLR)
library(MASS)
ceresPlots(MLR)
library(car)
ceresPlots(MLR)
crPlots(MLR)
ggplot(MLR, aes(x = genre, y = .resid)) + geom_point() + xlab("Genre") + ylab("Residuals") + theme(axis.text.x = element_blank())
qqplot(tmpMLR)
qqplot(MLR)
qqPlot(MLR)
library(MASS)#useful for residual normailty
sresid <- studres(MLR)
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
xfit<-seq(min(sresid),max(sresid),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit)
xfit<-seq(min(sresid),max(sresid),length=40)
sresid <- studres(MLR)
sresid
class(sresid)
View(movies_filtered)
sresid <- sresid[-22]
qqPlot(MLR)
sresid <- studres(MLR)
sresid <- sresid[-22]
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
xfit<-seq(min(sresid),max(sresid),length=40)
min(sresid)
sresid
sresid <- studres(MLR)
sresid <- sresid[-c(22, 50)]
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
xfit<-seq(min(sresid),max(sresid),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit)
plot(MLR$residuals ~ movies_filtered$critics_score)
crPlots(MLR)
ceresPlots(MLR)
crPlots(MLR)
ceresPlots(MLR)
plot(MLR$residuals ~ movies_filtered$critics_score)
plot(MLR$residuals ~ movies_filtered$runtime)
plot(MLR$residuals ~ movies_filtered$critics_score) + hline(0)
plot(MLR$residuals ~ movies_filtered$critics_score) _ abline(0)
plot(MLR$residuals ~ movies_filtered$critics_score) + abline(0)
plot(MLR$residuals ~ movies_filtered$critics_score)
abline(MLR)
plot(MLR$residuals ~ movies_filtered$critics_score)
abline(0)
plot(MLR$residuals ~ movies_filtered$critics_score)
abline(h=0)
plot(MLR$residuals ~ movies_filtered$runtime)
abline(h=0)
crPlots(MLR)
hist(MLR$residuals)
qqnorm(MLR$residuals)
qqline(MLR$residuals)
plot(MLR$residuals ~ MLR$fitted.values)
plot(abs(MLR$residuals) ~ MLR$fitted.values)
abline(h=0)
plot(MLR$residuals ~ movies_filtered$critics_score)
plot(MLR$residuals ~ movies_filtered$critics_score, main = "Residuals vs.critics_score")
abline(h=0)
plot(MLR$residuals ~ movies_filtered$runtime, main = "Residuals vs. runtime")
abline(h=0)
hist(MLR$residuals, main = "Histogram of Residuals")
qqnorm(MLR$residuals, main = "Normal Probability Plot of /nResiduals")
plot(MLR$residuals ~ MLR$fitted.values, main = "Residuals vs. Fitted")
abline(h=0)
plot(abs(MLR$residuals) ~ MLR$fitted.values, main = "Absolute Value of Residuals vs. Fitted")
abline(h=0)
install.packages("cowplot")
library(cowplot)
plot1 <- plot(MLR$residuals ~ movies_filtered$critics_score, main = "Residuals vs.critics_score")
abline(h=0)
plot2 <- plot(MLR$residuals ~ movies_filtered$runtime, main = "Residuals vs. runtime")
abline(h=0)
plot_grid(plot1, plot2)
plot(MLR$residuals ~ movies_filtered$critics_score, main = "Residuals vs.critics_score")
par(mfrow=c(1,2))
plot(MLR$residuals ~ movies_filtered$critics_score, main = "Residuals vs.critics_score")
abline(h=0)
plot(MLR$residuals ~ movies_filtered$runtime, main = "Residuals vs. runtime")
abline(h=0)
hist(MLR$residuals, main = "Histogram of Residuals")
qqnorm(MLR$residuals, main = "Normal Probability Plot of Residuals")
plot(MLR$residuals ~ MLR$fitted.values, main = "Residuals vs. Fitted")
abline(h=0)
plot(abs(MLR$residuals) ~ MLR$fitted.values, main = "Absolute Value of Residuals vs. Fitted")
par(mfrow=c(1,2))
plot(MLR$residuals ~ movies_filtered$critics_score, main = "Residuals vs.critics_score")
abline(h=0)
plot(MLR$residuals ~ movies_filtered$runtime, main = "Residuals vs. runtime")
abline(h=0)
par
par(mfrow=c(1,2))
plot(MLR$residuals ~ movies_filtered$critics_score, main = "Residuals vs.critics_score")
abline(h=0)
plot(MLR$residuals ~ movies_filtered$runtime, main = "Residuals vs. runtime")
abline(h=0)
dev.off()
hist(MLR$residuals, main = "Histogram of Residuals")
ggplot(movies_filtered, aes(x = title_type, y = audience_score)) + geom_boxplot() + xlab("Title Type") + ylab("Audience Score") + ggtitle("Audience Score vs. Title Type")
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -imdb_rating, -imdb_num_votes, -(actor1:rt_url)))
movies <- filter(movies, thtr_rel_year >1999)
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -imdb_rating, -imdb_num_votes, -(actor1:rt_url)))
library(ggplot2)
library(dplyr)
library(statsr)
library(knitr)
library(scales)
library(formattable)
library(psych)#improved pairs plot
movies <- filter(movies, thtr_rel_year >1999)
movies_filtered <- select(movies, c(-(thtr_rel_year:dvd_rel_day), -imdb_rating, -imdb_num_votes, -(actor1:rt_url)))
